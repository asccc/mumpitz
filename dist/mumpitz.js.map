{"version":3,"file":"mumpitz.js","sources":["mumpitz.js"],"sourcesContent":["/* global self */\n\n(function (global) {\n  'use strict';\n\n  if ((\n    !global.Symbol ||\n    !global.Symbol.iterator ||\n    !document.querySelectorAll ||\n    !document.addEventListener ||\n    !document.documentElement ||\n    !document.documentElement.matches\n  )) {\n    throw Error('browser not supported');\n  }\n\n  // tags\n  const ITERATOR_TAG = global.Symbol.iterator;\n  // const TOSTRING_TAG = global.Symbol.toString;\n\n  /**\n   * Mumpitz wrapper class\n   */\n  class Mumpitz {\n    /**\n     * static initializer\n     *\n     * @param  {String} selector\n     * @param  {Element|Document|null} context\n     * @return {Mumpitz}\n     */\n    static init (selector, context = document) {\n      return new Mumpitz(context.querySelectorAll(selector));\n    }\n\n    /**\n     * constructor\n     *\n     * @param  {NodeList} nodes\n     */\n    constructor (nodes) {\n      this.nodes = nodes;\n      this.length = nodes.length;\n    }\n\n    /**\n     * iterator\n     *\n     */\n    [ITERATOR_TAG] () {\n      // newer engines support Symbol.iterator on NodeList's\n      if (this.nodes[ITERATOR_TAG]) {\n        return this.nodes[ITERATOR_TAG]();\n      }\n\n      const count = this.length;\n      const nodes = this.nodes;\n      let index = 0;\n\n      return () => {\n        if (index + 1 >= count) {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n        return {\n          value: nodes[index++],\n          done: false\n        };\n      };\n    }\n\n    /**\n     * returns a node at the given index (zero-based)\n     * or all nodes if no index was specified\n     *\n     * @param {Number|null} index\n     * @return {Element}\n     */\n    get (index = null) {\n      if (index === null) {\n        return this.nodes;\n      }\n      let offset = index;\n      let length = this.length;\n      if (length === 0) {\n        throw Error('get(...) called on empty collection');\n      }\n      if (offset < 0) {\n        offset += length;\n      }\n      if (offset < 0 || offset >= length) {\n        throw Error(`get(...): index out of bounds (offset: ${offset}, length: ${length})`);\n      }\n      return this.nodes[offset];\n    }\n\n    /**\n     * check if an element matches a selector\n     *\n     * @param  {String}  sel\n     * @return {Boolean}\n     */\n    is (selector) {\n      return this.get(0).matches(selector);\n    }\n\n    /**\n     * searches for elements in the top-element\n     *\n     * @param  {String} sel\n     * @return {Mumpitz}\n     */\n    find (selector) {\n      return Mumpitz.init(selector, this.get(0));\n    }\n\n    /**\n     * checks if the first element has a class-name\n     *\n     * @param  {String}  cn\n     * @return {Boolean}\n     */\n    hasClass (className) {\n      return this.get(0).classList.contains(className);\n    }\n\n    /**\n     * removes a class-name\n     *\n     * @param  {String} className\n     * @return {Mumpitz}\n     */\n    removeClass (className) {\n      for (let e of this) {\n        e.classList.remove(className);\n      }\n      return this;\n    }\n\n    /**\n     * adds a class-name\n     *\n     * @param {String} className\n     */\n    addClass (className) {\n      for (let e of this) {\n        e.classList.add(className);\n      }\n      return this;\n    }\n\n    /**\n     * toggles a class\n     *\n     * @param  {String} className\n     * @return {Mumpitz}\n     */\n    toggleClass (className) {\n      for (let e of this) {\n        e.classList.toggle(className);\n      }\n      return this;\n    }\n  }\n\n  /* exports */\n  global.Mumpitz = Mumpitz.init;\n  global.Mumpitz.$ = global.$;\n  global.Mumpitz.fn = Mumpitz.prototype;\n  global.Mumpitz.noConflict = function () {\n    if (typeof global.Mumpitz.$ !== 'undefined') {\n      global.$ = global.Mumpitz.$;\n      delete global.Mumpitz.$;\n    }\n    return Mumpitz.init;\n  };\n\n  /* $ alias */\n  global.$ = global.Mumpitz;\n})(self);\n"],"names":["global","Symbol","iterator","document","querySelectorAll","addEventListener","documentElement","matches","Error","ITERATOR_TAG","Mumpitz","selector","context","nodes","length","count","index","value","undefined","done","offset","get","init","className","classList","contains","e","remove","add","toggle","$","fn","prototype","noConflict","self"],"mappings":"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"}